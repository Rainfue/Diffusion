import requests
import os
import time
import json
from tqdm import tqdm

class DanbooruParser:
    def __init__(self, tags: str, output_dir: str = "downloaded", 
                 limit_per_page: int = 100, max_pages: int = 5, 
                 min_score: int = 20, rating: str = "g", 
                 delay: float = 1.0, start_page: int = 1):  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä start_page
        """
        :param start_page: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        self.tags = tags
        self.output_dir = output_dir
        self.limit = min(limit_per_page, 200)
        self.max_pages = max_pages
        self.min_score = min_score
        self.rating = rating
        self.delay = delay
        self.start_page = start_page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.base_url = "https://danbooru.donmai.us/posts.json"
        self.metadata = []
        os.makedirs(output_dir, exist_ok=True)

    def fetch_page(self, page: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ—Å—Ç–∞–º–∏"""
        params = {
            "tags": self.tags,
            "page": page,
            "limit": self.limit,
            "rating": self.rating
        }
        try:
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {str(e)}")
            return None

    def download_image(self, url: str, filename: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()
            with open(filename, 'wb') as f:
                for chunk in response.iter_content(8192):
                    f.write(chunk)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")
            return False

    def save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
        with open(os.path.join(self.output_dir, "metadata.json"), "w") as f:
            json.dump(self.metadata, f, indent=2)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print(f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–∞: {self.tags} —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {self.start_page}")
        downloaded_ids = set()
        total_downloaded = 0

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        metadata_path = os.path.join(self.output_dir, "metadata.json")
        if os.path.exists(metadata_path):
            with open(metadata_path, "r") as f:
                existing_metadata = json.load(f)
                downloaded_ids = {item["id"] for item in existing_metadata}
            print(f"‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(downloaded_ids)} —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        for page in range(self.start_page, self.start_page + self.max_pages):
            print(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{self.start_page + self.max_pages - 1}")
            data = self.fetch_page(page)
            
            if not data:  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –æ—à–∏–±–∫–∞
                print(f"‚ÑπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                break

            page_downloaded = 0
            for post in tqdm(data, desc="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
                if post["id"] in downloaded_ids:
                    continue
                if post["score"] < self.min_score:
                    continue
                if not post.get("file_url"):
                    continue

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                file_ext = os.path.splitext(post["file_url"])[1]
                filename = f"{post['id']}{file_ext}"
                filepath = os.path.join(self.output_dir, filename)

                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                if self.download_image(post["file_url"], filepath):
                    downloaded_ids.add(post["id"])
                    total_downloaded += 1
                    page_downloaded += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    metadata_entry = {
                        "id": post["id"],
                        "tags": post["tag_string"],
                        "score": post["score"],
                        "rating": post["rating"],
                        "source": post.get("source", ""),
                        "file_path": filename,
                        "page": page  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    }
                    self.metadata.append(metadata_entry)

            print(f"‚ÑπÔ∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} —Å–∫–∞—á–∞–Ω–æ: {page_downloaded} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            if page_downloaded == 0:
                print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                break
                
            time.sleep(self.delay)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
        if os.path.exists(metadata_path):
            with open(metadata_path, "r") as f:
                existing_metadata = json.load(f)
            self.metadata = existing_metadata + self.metadata
        
        self.save_metadata()
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_downloaded}")
        print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {metadata_path}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
    parser = DanbooruParser(
        tags="ayanami_rei", 
        output_dir="rei_images",
        limit_per_page=50,
        max_pages=300,
        min_score=5,
        rating="g",
        delay=3,
        start_page=40  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    )
    parser.run()